########################################################################################################################
#                       A U T O   G E N E R A T E D   -   D O    N O T   C H A N G E                                   #
########################################################################################################################
labels:
  domain: com.ind
  subdomain: bitlog
  boundedContext: codo
  component: spring-boot
  templateName: spring-boot-scaffold
  templateVersion: 1.0.17
  templateCommitHash: "7c1b7a6"
########################################################################################################################

global:
  artifactoryUrl: "registry.artifactory.prod.lkw-walter.com"
  rundeckUrl: "https://devops-rundeck.prod.lkw-walter.com"
  kafka:
    schemaRegistry: http://schema-registry.dev.lkw-walter.com
    bootstrapServers: widmpp04.lkw-walter.com:9093
    clusterFQDN: kafka.dev.lkw-walter.com
  secretName: changeMe
  clusterName: dev #(dev|test|preprod|prod)
  # The datasource section is an example how to use it if multiple components of a lieferschein are sharing the same datasource
  # - if you have multiple datasources you can introduce a subsection with the name of the datasource
  # - if you have a single datasource you can move this section from global to the root of the values.yaml
  # Note: If you have a datasource with a standardized FQDN (dbName.<dev>.lkw-walter.com), you can configure the DB specific
  #       values directly in values yaml and just reference the clusterName. For an Example look at the ingress config or
  #       the wurm.auth.client.base-url in the env section.

opsContact: changeMe@example.com
devContact: changeMe@example.com

replicaCount: 2

podManagementPolicy: OrderedReady
updateStrategy:
  type: RollingUpdate
  rollingUpdate:
    partition: 0

initContainers:
  kafkaTopics:
    enabled: true
    image:
      name: registry.artifactory.prod.lkw-walter.com/kafka/kafka-init
      tag: 1.1.24
    bootstrapServers: "{{ .Values.global.kafka.bootstrapServers }}"
    secretName: "{{ .Values.global.secretName }}"
    envSecrets:
      - ssl.truststore.password: kafka_truststore_password
      - ssl.keystore.password: "bitlog-codo_keystore_password"
      - ssl.key.password: "bitlog-codo_keystore_password"
  ssl:
    image:
      name: registry.artifactory.prod.lkw-walter.com/ssl-init-container
      tag: 2
    env:
      "APPLICATION_NAME": bitlog-btlg-cmp
      "KAFKA_CLUSTER": "{{ .Values.global.kafka.clusterFQDN }}"
      "RUNDECK_BASE_URL": "{{ .Values.global.rundeckUrl }}"
      "RUNDECK_JOB_ID": "b4632587-f3c4-4d20-9a9b-9a33c90e5ec3"
    secretName: "{{ .Values.global.secretName }}"
    envSecrets:
      - ARTIFACTORY_USER: artifactory_user
      - ARTIFACTORY_PASSWORD: artifactory_password
      - RUNDECK_TOKEN: rundeck_token
      - KEYSTORE_PASSWORD: "bitlog-codo_keystore_password"

image:
  name: "{{ .Values.global.artifactoryUrl }}/bitlog/bitlog-btlg-cmp"
  tag: latest
  pullPolicy: Always

ssl:
  enabled: true

topics: {}

consumerGroup:
  name: bitlog-btlg-cmp
  topicInitialization:
    input: "P30D" # e.g. EARLIEST, LATEST or Duration like P90D (initializes the consumer group with this offsets if it doesn't exist)

# The {{ }} placeholders can be used inside the key and the value of the map
# Example:
# "something.{{ .Values.datasource.name }}.properties" : "{{ .Values.datasource.properties }}"
env:
  "JAVA_OPTS": -XX:+UseContainerSupport -XX:MaxRAMPercentage=75
  "spring.kafka.bootstrap-servers": "{{ .Values.global.kafka.bootstrapServers }}"
  "spring.kafka.properties.schema.registry.url": "{{ .Values.global.kafka.schemaRegistry }}"
  "spring.kafka.streams.application-id": "{{ .Values.consumerGroup.name }}"

# The {{ }} placeholders can be used inside any part of the map
# Make us of nested secrets via:
# secretName: <secretName0>
# envSecrets:
#   - <envnameA>: <secretkeyA> # uses secretName0
#   - <secretname1>:
#     - <envnameB>: <secretkeyB> # uses secretName1
#     - <envnameC>: <secretkeyC> # uses secretName1
#   - <secretname2>:
#     - <envnameD>: <secretkeyD> # uses secretName2
#   ...
secretName: "{{ .Values.global.secretName }}"
envSecrets:
  - spring.kafka.ssl.trust-store-password: "kafka_truststore_password"
  - spring.kafka.ssl.key-store-password: "bitlog-codo_keystore_password"
  - spring.kafka.ssl.key-password: "bitlog-codo_keystore_password"
  - spring.security.user.name: "technical_user_bitlog_username"
  - spring.security.user.password: "technical_user_bitlog_password"

livenessProbe:
  enabled: true
  initialDelaySeconds: 180
  timeoutSeconds: 1
  periodSeconds: 10
  failureThreshold: 3
  successThreshold: 1

readinessProbe:
  enabled: true
  initialDelaySeconds: 1
  timeoutSeconds: 1
  periodSeconds: 10
  failureThreshold: 3
  successThreshold: 1

service:
  type: ClusterIP
  port: 8080
  targetPort: 8080
  metricsPort: 8081
  metricsTargetPort: 8081

ingress:
  enabled: true
  host: "bitlog-btlg-cmp.{{ .Values.global.clusterName }}.lkw-walter.com"

# A minimal CPU Ratio of factor 4 is mandatory
resources:
  requests:
    cpu: 500m
    memory: 1Gi
  limits:
    cpu: 2000m
    memory: 1Gi

serviceMonitor:
  enabled: true

monitoring: true

metrics: {}
#  labels:
#  - domain
#  - subdomain
#  annotations:
#  - dev_contact
#  - ops_contact
