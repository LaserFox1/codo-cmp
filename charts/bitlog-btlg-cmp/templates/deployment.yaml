apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include (printf "phxFunctions.%s.fullname" (index .Values "phx-helm-functions" "version")) (dict "chart" .Chart "values" .Values "release" .Release) }}
  annotations:
{{ include (printf "phxFunctions.%s.annotations" (index .Values "phx-helm-functions" "version")) (dict "values" .Values) | nindent 4 }}
  labels:
{{ include (printf "phxFunctions.%s.labels" (index .Values "phx-helm-functions" "version")) (dict "chart" .Chart "values" .Values "release" .Release) | nindent 4 }}
{{ include "lieferschein.labels" . | nindent 4 }}
{{- include (printf "phxFunctions.%s.additional-labels" (index .Values "phx-helm-functions" "version")) (dict "values" .Values)| nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include (printf "phxFunctions.%s.name" (index .Values "phx-helm-functions" "version")) (dict "chart" .Chart "values" .Values) }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      annotations:
{{ include (printf "phxFunctions.%s.annotations" (index .Values "phx-helm-functions" "version")) (dict "values" .Values) | nindent 8 }}
      labels:
{{ include (printf "phxFunctions.%s.labels" (index .Values "phx-helm-functions" "version")) (dict "chart" .Chart "values" .Values "release" .Release) | nindent 8 }}
{{- include (printf "phxFunctions.%s.additional-labels" (index .Values "phx-helm-functions" "version")) (dict "values" .Values)| nindent 8 }}
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: {{ include (printf "phxFunctions.%s.name" (index .Values "phx-helm-functions" "version")) (dict "chart" .Chart "values" .Values) }}
                    app.kubernetes.io/instance: {{ .Release.Name }}
                    app.kubernetes.io/version: {{ .Chart.AppVersion | quote }}
                topologyKey: kubernetes.io/hostname
              weight: 100
    {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
    {{- end }}
      initContainers:
      {{- if .Values.ssl.enabled }}
        - name: ssl-init-container
          image: "{{ .Values.initContainers.ssl.image.name }}:{{ .Values.initContainers.ssl.image.tag }}"
          env:
            {{ include (printf "phxFunctions.%s.resolveEnvVars" (index .Values "phx-helm-functions" "version")) (dict "env" .Values.initContainers.ssl.env "values" .Values) | nindent 12 }}
            {{ include (printf "phxFunctions.%s.flattenEnvSecrets" (index .Values "phx-helm-functions" "version")) (dict "secretName" .Values.initContainers.ssl.secretName "envSecrets" .Values.initContainers.ssl.envSecrets "values" .Values) | nindent 12 }}
          resources:
            limits:
              cpu: 1000m
              memory: 50Mi
            requests:
              cpu: 10m
              memory: 50Mi
          volumeMounts:
            - name: ssl-data
              mountPath: /output
      {{- end }}
      {{- if .Values.initContainers.kafkaTopics.enabled }}
        {{- if .Values.topics }}
        - name: kafka-topics-init-container
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          image: "{{ .Values.initContainers.kafkaTopics.image.name }}:{{ .Values.initContainers.kafkaTopics.image.tag }}"
          env:
            - name: TOPICS
              value: {{ $.Values.topics | toJson | quote}}
            - name: CONSUMER_GROUPS
              value: {{ dict $.Values.consumerGroup.name $.Values.consumerGroup.topicInitialization | toJson | quote }}
            - name: KAFKA_BOOTSTRAP_SERVERS
              value: {{ include (printf "phxFunctions.%s.resolveString" (index .Values "phx-helm-functions" "version")) (dict "value" .Values.initContainers.kafkaTopics.bootstrapServers "values" .Values) | trim }}
            - name: KAFKA_REPLICATION_FACTOR
              value: {{ $.Values.initContainers.kafkaTopics.replicationFactor | default 3 | quote}}
            - name: SSL_ENABLED
              value: {{ .Values.ssl.enabled | quote }}
          {{- if .Values.ssl.enabled }}
            - name: "ssl.truststore.location"
              value: /var/private/ssl/{{ include (printf "phxFunctions.%s.resolveString" (index .Values "phx-helm-functions" "version")) (dict "value" .Values.initContainers.ssl.env.KAFKA_CLUSTER "values" .Values) | trim -}}.jks
            - name: "ssl.keystore.location"
              value: /var/private/ssl/{{ .Chart.Name }}.{{ include (printf "phxFunctions.%s.resolveString" (index .Values "phx-helm-functions" "version")) (dict "value" .Values.initContainers.ssl.env.KAFKA_CLUSTER "values" .Values) | trim -}}.jks
            {{ include (printf "phxFunctions.%s.flattenEnvSecrets" (index .Values "phx-helm-functions" "version")) (dict "secretName" .Values.secretName "envSecrets" .Values.initContainers.kafkaTopics.envSecrets  "values" .Values) | nindent 12 }}
          volumeMounts:
            - name: ssl-data
              mountPath: /var/private/ssl
          {{ end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
        {{- end }}
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          image: {{ include (printf "phxFunctions.%s.resolveString" (index .Values "phx-helm-functions" "version")) (dict "value" .Values.image.name "values" .Values) | trim -}}:{{ .Values.image.tag }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          {{- if .Values.livenessProbe.enabled }}
          livenessProbe:
            httpGet:
              port: {{ .Values.service.metricsTargetPort }}
              path: /health/liveness
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
            failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
            successThreshold: {{ .Values.livenessProbe.successThreshold }}
          {{- end }}
          {{- if .Values.readinessProbe.enabled }}
          readinessProbe:
            httpGet:
              port: {{ .Values.service.metricsTargetPort }}
              path: /health/readiness
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
            failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
            successThreshold: {{ .Values.readinessProbe.successThreshold }}
          {{- end }}
          env:
          {{ include (printf "phxFunctions.%s.resolveEnvVars" (index .Values "phx-helm-functions" "version")) (dict "env" .Values.env "values" .Values) | nindent 12 }}
          {{ include (printf "phxFunctions.%s.flattenEnvSecrets" (index .Values "phx-helm-functions" "version")) (dict "secretName" .Values.secretName "envSecrets" .Values.envSecrets "values" .Values) | nindent 12 }}
          {{- if .Values.ssl.enabled }}
            - name: "spring.kafka.properties.security.protocol"
              value: "SSL"
            - name: "spring.kafka.ssl.trust-store-location"
              value: file:///var/private/ssl/{{ include (printf "phxFunctions.%s.resolveString" (index .Values "phx-helm-functions" "version")) (dict "value" .Values.initContainers.ssl.env.KAFKA_CLUSTER "values" .Values) | trim }}.jks
            - name: "spring.kafka.ssl.key-store-location"
              value: file:///var/private/ssl/{{ .Chart.Name }}.{{ include (printf "phxFunctions.%s.resolveString" (index .Values "phx-helm-functions" "version")) (dict "value" .Values.initContainers.ssl.env.KAFKA_CLUSTER "values" .Values) | trim }}.jks
          {{ end }}
          ports:
            - containerPort: {{ .Values.service.targetPort }}
              protocol: TCP
            - containerPort: {{ .Values.service.metricsTargetPort }}
              protocol: TCP
          volumeMounts:
            {{- if .Values.ssl.enabled }}
            - name: ssl-data
              mountPath: /var/private/ssl
            {{ end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      volumes:
      {{- if .Values.ssl.enabled }}
        - name: ssl-data
          emptyDir: {}
      {{ end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
